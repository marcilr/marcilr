README
Created Fri 08 Nov 2019 11:20:04 AM AKST
by Raymond E. Marcil <marcilr@gmail.com>


For ssh checkout need crypto keys:


$ git clone ssh://github.com/marcilr/bin bin
Cloning into 'bin'...
Warning: Permanently added the RSA host key for \
IP address '192.30.255.112' to the list of known hosts.
marcilr@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
$ 



Filelist
========
.bashrc
  ~/.bashrc: executed by bash(1) for non-login shells.
  see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
  for examples

.gitignore
  Files for git to ignore

.ICEauthority
  Basically ICE is a inter process communication
  protocol, with authentication, protocol negotiation 
  and potentially multiplexing built in.

  It allows two X clients to talk directly to each 
  other, for example, a video player program could 
  potentially talk to a jukebox program to update each 
  other.

  As Richard Holloway says, the .ICEAuthority file is 
  for authentication.  It contains a number of random 
  cookies.  If two programs have the same cookie, then 
  they're allowed to talk to each other.  In practice
  this either means that they're reading the same
  .ICEAuthority file, or the cookies have been added.

  In a lot of ways it's similar to the xauth program
  the .Xauthority file, except that .ICEAuthority is
  used for client to client, while .Xauthority is for
  client to server.

  what is .ICEAuthority file in opensuse 11.2
  Serverfault
  https://serverfault.com/questions/119580/what-is-iceauthority-file-in-opensuse-11-2

bin/
  Binaries
  Initial checkout:
  $ git clone https://github.com/marcilr/bin bin
  Cloning into 'bin'...
  remote: Enumerating objects: 27, done.
  remote: Counting objects: 100% (27/27), done.
  remote: Compressing objects: 100% (17/17), done.
  remote: Total 111 (delta 16), reused 21 (delta 10), pack-reused 84
  Receiving objects: 100% (111/111), 188.11 KiB | 183.00 KiB/s, done.
  Resolving deltas: 100% (55/55), done.
  $ 

Downloads/

git/
  Revision control
